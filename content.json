{"pages":[{"title":"about","text":"","link":"/about/index.html"}],"posts":[{"title":"学习使用PlantUML","text":"简介PlantUML是一个开源项目，支持通过文本快速绘制时序图，用例图，类图等多种软件图。 官方学习网站:PlantUML学习 使用PlantUML在线使用PlantUML在线网址 Visual Studio Code下载安装Visual Studio Code后，再安装相关插件。 文件-首选项-扩展，安装Markdown Preview Enhanced 和Markdown Preview Mermaid Support插件。 学习用typora怎么画图Typora 使用小技巧","link":"/2020/10/09/2020-10-09-%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8PlantUml/"},{"title":"理解会话与请求","text":"前言这篇文章介绍android相机会话与请求的相关知识。包括： Camera管道机制 会话如何使用 请求如何下发 CameraDevice一个安卓设备上有多个摄像头，每一个设备对应一个CameraDevice，每一个Camera Device可以同时输出多路数据流。 通常应用使用到的流数据包括有预览流，拍照流，录像流，和回调流这样几种流。其中预览流会直接送显，拍照流一般会保存为图片，录像流是存储为视频，回调流是应用可以拿到每一帧数据，自己再做进一步处理。一个相机设备，同时输出多路流，我们可以理解为对相机生产的RAW图进行并发处理。 每种数据流有它对应的输入格式。Android Camera Framework图像数据是通过管道机制流转，创建CameraCaptureSession建立上层与底层CaneraDevice交流的管道。 CameraCaptureSessionCameraCaptureSession用来描述和管理对应CameraDevice所有创建好的管道。 CameraCaptureSession通过传入对应的Surface列表创建出对应的管道，Session一但被创建好后，不能添加和移除管道。Session整个生命周期内，可以捕获一次或者多次请求。每一个管道之所以可以将输入的数据转换成对应的图像格式，是因为管道建立时候是根据对应输出目标Surface创建了对应的输出流。Session构造方式： 返回值 函数定义 void createCaptureSession(SessionConfiguration config)Create a new CameraCaptureSession using a SessionConfiguration helper object that aggregates all supported parameters. abstract void createCaptureSession(List outputs, CameraCaptureSession.StateCallback callback, Handler handler)This method was deprecated in API level 30. Please use createCaptureSession(android.hardware.camera2.params.SessionConfiguration) for the full set of configuration options available. abstract void createCaptureSessionByOutputConfigurations(List outputConfigurations, CameraCaptureSession.StateCallback callback, Handler handler)This method was deprecated in API level 30. Please use createCaptureSession(android.hardware.camera2.params.SessionConfiguration) for the full set of configuration options available. abstract void createConstrainedHighSpeedCaptureSession(List outputs, CameraCaptureSession.StateCallback callback, Handler handler)This method was deprecated in API level 30. Please use createCaptureSession(android.hardware.camera2.params.SessionConfiguration) for the full set of configuration options available. 可以看到有些构造方式已经在最新的SDK中被遗弃了。 CaptureaRequestCaptureaRequest包含一个Builder内部类，通过Builder.build()函数可以创建CaptureRequest对象。 通常的使用的步骤： 通过CameraDevice.createCaptureRequest(@RequestTemplate int templateType) 创建builder对象。 通过builder. addTarget(@NonNull Surface outputTarget) 为请求添加目标消费者。 通过Builder.build()函数创建CaptureaRequest对象。 创建 CameraCaptureSession.CaptureCallback 回调函数和处理回调的子线程Handler。 通过CameraCaptureSession请求下发的函数提交请求，例如 setRepeatingRequest(CaptureRequest, CaptureCallback, Handler) 提交一个预览请求。 在CaptureRequest中定义了大量用于请求设置的TAG属性，请求中的这些属性会通过metadata下发到HAL被执行。 相机应用最常见的场景就是预览过程中下发一个拍照命令，捕获一张照片保存下来，这种情况下不需要停止正在进行预览，只需要下发一个非重复的拍照请求。需要注意的是，这种场景下，创建会话里一定是同时包含了预览和拍照的Surface，因为请求的目标Surface一定是已经保存在会话中的，预览请求的优先级低于拍照请求。","link":"/2020/10/20/2020-10-20-%E5%A4%9A%E5%AA%92%E4%BD%93%E7%9B%B8%E6%9C%BA%E7%B3%BB%E5%88%97_%E7%90%86%E8%A7%A3%E4%BC%9A%E8%AF%9D%E4%B8%8E%E8%AF%B7%E6%B1%82/"},{"title":"依赖反转","text":"多态应该是面向对象编程范式，提供了最强大的能力，多态使得依赖反转成为了可能。 没有多态以前，高层函数要调用底层函数是一定要依赖于底层，再直接调用它定义函数。这种依赖是必须的，不同语言用不同的方式来实现这种依赖，C用include导入头文件，Java用import导入包名，C#用using导入命名空间。但是有了多态这种关系就被打破了。 A模块为了调用B模块的能力，第一幅图从A依赖B，但是通过依赖反转，A模块通过定义接口依赖于抽象接口，B模块去实现接口，这样依赖，A不再依赖于B模块，而B模块依赖于A模块的抽象接口了。结合上面的内容，最后再体会下依赖反转原则的定义，就比较好理解了： 1.高层次的模块不应该依赖于低层次的模块，两者都应该依赖于抽象接口。 2.抽象接口不应该依赖于具体的实现和具体实现，而具体的实现应该依赖于抽象接口。面向对象编程到底是什么？业界在这个问题上存在很多不同的说法和意见，然后对于一个软件架构师来说，其含义应该是非常明确的，面向对象编程就是以多态的手段对源代码中的依赖关系进行控制的能力，这种能力让软件加入是可以构建出某种插件式架构，让高层策略性组建与底层实现组件相分离，底层祖先可以被编译成插件，实现独立与高层组建的开发和部署。","link":"/2020/10/30/2020-10-30-%E4%BE%9D%E8%B5%96%E5%8F%8D%E8%BD%AC/"},{"title":"曝光介绍","text":"曝光的英文是Exposure，一张照片的曝光度决定了相机拍摄的照片明暗程度。曝光通常只由三个相机设置决定：光圈、快门速度和ISO。相机感光元件通过感应物体反射的光信号，记录下一个个像素信息，组成一张完整的图片。曝光直接影响到一张图片的质量，拍摄者想要拍出一张好的照片，既需要保证感光元件接受到的光信号不能过强（曝光过度），也要保证不能太弱（曝光不足）。那么照相机接受到多少光信号可以由哪些因素控制呢？这个其实和木桶收集雨水一个道理，降雨虽然是不可控的（类比光源强度不可控），我们依然可以控制木桶宽度，木桶在雨中接雨水的时间和希望收集的雨量。 曝光三角形光圈就像木桶的宽度，决定了光通量大小。快门速度就像决定了木桶在雨中搁置的时长一样，可以决定曝光时间。ISO：数码相机中表示CCD或者CMOS感光元件的感光速度，或者说对给定光亮的敏感度，数值越高，就说明感光元器件的感光能力越强。公式：H*S=0.8,S代表感光度，H代表曝光量。实际上，如果感光度越高，对曝光量的要求就越小。 通过，对上面三个控制量的不同组合可以实现相同的曝光，但是不同组合也会影响其他图像属性。例如，光圈影响景深，快门速度影响运动模糊，ISO速度影响图像噪点。详细内容可以通过下面这篇文章学习：camera-exposure 光圈 第一行表示景深，从左，依次往右景深变得越来越浅，也就是背景越来越模糊。光圈越大，景深越浅，也就是图片的背景越模糊，光圈越小，景深越深越就是图片的背景越清晰。 快门速度快门速度可以决定曝光时间。从数字上看，快门速度对曝光的影响可能三种相机设置中最简单的：它与进入相机的光线量正好是1比1的关系。例如，当爆发时间增加一倍时，进入相机的光通量也会增加一倍。这也是一种可能性范围最广的设置。 Shutter Speed Typical Examples 1 - 30+ seconds 用于在三脚架上拍摄夜景和低光照片 2 - 1/2 second 为流动的水面增添丝滑感，在三脚架上拍摄风景照片，增强景深。 1/2 to 1/30 second 为移动的被摄体的背景添加运动模糊 仔细拍摄带有稳定功能的手持照片。 1/50 - 1/100 second 典型的手持照片，没有大幅变焦 1/250 - 1/500 second 定格日常运动/动作被摄体的动作 使用大幅变焦（长焦镜头）的手持照片。 1/1000 - 1/4000 second 冻结极快的、近距离的被摄体运动。 ISOISO速度决定了相机对入射光线的敏感程度。与快门速度类似，它也与曝光的增加或减少为1比1相关。一般来说，哎呀，时值越低相片质量越高，像这些细节表现越好，因为这样做的is速度会显著增加图像噪点。因此，通常只有在无法获得所需的光圈和快门速度时，才会ISO速度从其最小值提高。","link":"/2021/01/16/2021-01-16-%E5%A4%9A%E5%AA%92%E4%BD%93%E7%9B%B8%E6%9C%BA%E7%B3%BB%E5%88%97_%E6%9B%9D%E5%85%89%E4%BB%8B%E7%BB%8D/"},{"title":"构建系统学习","text":"一般来说，元构建系统生成构建文件，构建工具进一步将其编译构建生成目标文件。 元构建系统GNGN是一种元构建系统，用于生成Ninja构建文件，然后ninja根据.ninja文件执行编译构建并生成目标文件。GN的全拼：Generate Ninja。 常见的元构建系统有cmake,gn等，可以指定编译器和链接器完成编译生成目标文件。 编译器：gcc,msvc，clang和llvm等。 连接器：lld和llvm等。 构建工具ninjaninja是一个轻量级的构建工具，和make类似，构建速度相对make更快。一般在Unix/Linux上的程序通过make/makefile来构建编译，而Ninja通过将编译任务并行组织，大大提高了构建速度。 常见构建方案：cmake+ninja构建，gn+ninja构建. ninja可以很好的组合gyp和CMake一起使用，后者为其生成.ninja文件。 ninja项目的最终编译产出物是一个可执行文件ninja。 下载与安装ninja下载与编译 预装 graphviz及其开发库，gtest，git、re2c和python 1234mkdir -p ~/ninja &amp;&amp; cd ~/ninjagit clone https://github.com/martine/ninjacd ninjapython ./bootstrap.py gn下载12345sudo apt-get install clanggit clone https://gn.googlesource.com/gncd gnpython build/gen.pyninja -C out","link":"/2021/02/28/2021-02-28-%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"},{"title":"Vulkan系列:环境安装","text":"1 安装环境Vusual Studio 2015 or higher version建议去官网下载，我自己用的是早期在学校做项目时候自己保存在百度网盘上的一份安装包。 链接: https://pan.baidu.com/s/1gfu64eSLUngNNam7FtNmXA 提取码: qmgv vulkan驱动程序大部分硬件厂商已经在默认的驱动安装包中包含了Vulkan的支持 安装python建议去官网下载，这里提供另一个下载路径。 python3.9下载 安装过程中选择添加环境变量到PATH，如果没有的话，安装后需要自行添加。 查看安装结果 12C:\\Users\\Administrator&gt;python --versionPython 3.9.0 CMake下载位置https://cmake.org/files/ 太慢的话 我在下面链接里下载了一个腾讯软件中心的版本 Cmake下载 安装过程中选择添加环境变量到PATH，如果没有的话，安装后需要自行添加。 查看安装结果： 1234C:\\Users\\Administrator&gt;cmake --versioncmake version 3.15.5CMake suite maintained and supported by Kitware (kitware.com/cmake). LunarG sdk下载路径：LunarG sdk官网下载 sdk的默认安装路径C:\\VulkanSDK\\版本。安装成功后，SDK的bin目录会自动添加到系统的环境变量PATH中，还会添加一个新的环境变量VK_SDK_PATH，指向sdk安装路径。 安装程序还会降Vulkan加载器（vulkan-1.dll）添加到C:\\Windows\\System32安装程序后不知道为啥，C:\\Windows\\System32没有vulkan-1.dll，只有一个vulkan-1-999-0-0-0.dll，导致我运行C:\\VulkanSDK\\1.2.141.0\\Bin\\vkcube.exe 运行失败。所以我把vulkan-1-999-0-0-0.dll复制一份并改名为vulkan-1.dll。 同样的需要将 C:\\Windows\\SysWOW64里面的ulkan-1-999-0-0-0.dll复制一份并改名为vulkan-1.dll。不然后续调试过程中会报找不到vulkan-1.dll错误。 2 编译调试SamplesLunarG sdk中包含有大量vulkan学习的案例，可以通过cmake构建案例工程并进行调试。 进入C:\\VulkanSDK\\1.2.141.0\\Samples文件夹,执行： 123mkdir build2cd build2Cmake -G &quot;Visual Studio 14 Win64&quot; .. 打开VULKAN-SAMPLES.sln，并且分别选择debug和release两种方式重新生成（rebuild）所有的项目 接下来，可以对项目进行调试。例如下图查看并运行15-draw_cube项目。","link":"/2021/02/27/2021-02-26-Vulkan%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"title":"Vulkan系列:配置开发环境","text":"配置vulkan开发环境开发工具：Visual Studio 1 VC++目录需要修改包含目录和库目录。 包含目录中添加C:\\VulkanSDK\\1.2.141.0\\Include 库目录中添加C:\\VulkanSDK\\1.2.141.0\\Bin32和C:\\VulkanSDK\\1.2.141.0\\Lib32 2 链接器链接器-输入：添加vulkan-1.lib，同样需要修改Win32和Win64平台。","link":"/2021/02/27/2021-02-26-Vulkan%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"title":"高效使用VIM","text":"1 安装ctagsctags用于快速定位，跳转代码 2 配置 Taglist 和NERDTree下载Taglisttaglist下载链接 下载下来后，unzip taglist_46.zip 到~/.vim 下载NERDTreeNERDTree下载链接 下载下来后，NERD_tree.zip 到~/.vim 安装taglist前先安装ctags，否则会打印Plugin is not loaded的错。 3 配置vimrc创建并添加以下内容到～/.vimrc 可以根据自己的喜好配置 1234567891011121314filetype plugin onlet NerdtREEwINpOS=&quot;right&quot;nmap&lt;F8&gt;:TlistToggle&lt;CR&gt;nmap&lt;F9&gt;:NERDTreeToggle&lt;CR&gt;set mouse=a# 设置高亮光标行set cursorlinehi CursorColumn cterm=NONE ctermbg=darked ctermfg=white guibg=darked guifg=white#与C语言语法一致set cindent set number#自动补全set completeopt=longest,menu","link":"/2021/02/28/2021-02-28-%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8VIM/"},{"title":"Android基础系列:编译与反编译","text":"1 编译1.1 编译器&emsp;&emsp;计算机只能识别01,无法读懂程序员用java等高级语言写出的if else代码,所以这些代码在使用之前一定要转换成可以执行的二进制文件。 &emsp;&emsp;这也是编译器存在的原因。编译器是将高级语言编写的程序解析成计算机需要的详细机器语言指令集的程序。编译器是一个程序,其工作是转换源码为可执行代码。 &emsp;&emsp;可执行代码是用计算机的本机语言或机器语言表示的代码。这种语言由数字代码(01)表示的详细指令组成。不同的计算机具有不同的机器语言。 1.2 java编译器&emsp;&emsp;JDK安装后,在bin文件夹下有一个javac.exe的应用程序,这个程序可以简单看作是java编译器。 &emsp;&emsp;javac.exe将java源码(java文件)编译成二进制字节码文件(.class文件),这是一种特殊的二进制文件,它是JVM的”机器语言”。 &emsp;&emsp;所以说javac.exe并没有将java源码直接翻译成计算机可以识别的机器语言,而是翻译成了java虚拟机识别的语言,而jvm将其再进一步翻译成对应的机器语言,这是java程序实现跨平台的原因,因为java程序可以跑在任何安装了jvm的计算机上。 &emsp;&emsp;扩展学习《深入浅出JIT编译器》 1.3 Android 编译器&emsp;&emsp;我们了解到JVM是java程序的运行环境,用来运行java的字节码程序。google为android平台专门设计了运行环境,以前是Dalvik,现在是ART(Android Runtime) 2 反编译2.1反编译工具（1）dex2jar &emsp;&emsp;从下面链接可以下载最新的dex2jar工具： （2）jadx &emsp;&emsp;下载jadx工具,下载并解压,执行jadx-0.7.1\\binjadx-gui.bat, 将反编译出的jar包拖进来就可以看到源码文件。 2.2反编译步骤1 解压出apk包中的classes.dex 2 使用的dex2jar工具中的d2j-dex2jar.bat 操作apk解压出来的classes.dex，得到classes-dex2jar.jar 3 使用jd-gui打开反编译出来的classes-dex2jar.jar,就可以看到所有的源码。","link":"/2021/01/16/2021-03-01-%20%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%8D%E7%BC%96%E8%AF%91/"},{"title":"向量的点乘与差乘","text":"PS:如果公式不能正常显示，请使用chrome添加GitHub with MathJax插件 点乘 点乘的结果 是一个数值，可以告诉我们向量的方向性。向量点乘大于0代表两个向量方向基本一致，等于0代表垂直，小于0代表方向相反。也可以反映两个向量有多接近，值越大说明两个向量越接近，值越小表明越趋于相反。 叉乘 叉乘结果得到另外一个向量。a b差乘的结果垂直于a和b，方向可以通过右手螺旋定则得到。axb伸出右手，四指指向a方向，再向b弯曲四指，此时大拇指指向的方向为叉乘方向。 通过叉乘可以得到一个三维空间的坐标系。在一个三维空间里，我们给定x轴和y轴,可以差乘得到z轴。 叉乘的用处？叉乘可以用来判断向量的左右关系，判断内外关系。这个在计算机图形学中非常有用，例如光栅化过程中就需要知道点是否在渲染区域里。","link":"/2021/02/28/2021-03-01-%E5%90%91%E9%87%8F%E7%9A%84%E7%82%B9%E4%B9%98%E4%B8%8E%E5%B7%AE%E4%B9%98/"},{"title":"使用FFmpeg","text":"视频格式视频文件本身是一个包含了音频和视频的容器，还可能包含字幕等其他信息。常见的视频文件格式：MPEG格式、AVI格式、nAVI格式、ASF格式、WMV格式、MOV格式、3GP格式。 编码格式codec不同的编码格式有不同的压缩率，会影响文件的大小和清晰度。可以查看FFmpeg支持的视频文件格式：ffmpeg -formats常见的有版权的编码格式： H. 262 H. 264 H. 265 常见的无版权编码格式 VP8 VP9 AV1常见的音频编码格式 Mp3 AAC 查看编码格式ffmpeg -codecs 编码器encoders通过编码器可以对音视频进行编码和解码ffmpeg有内置的编码器。通过ffmpeg -encoders查看已安装的编码器 ffmpeg常用工具ffmpeg中有三个工具，demuxer（解析文件）,parser（解析帧）和decoder（解码）. ffmpeg下载与安装可以直接从官网进行下载，根据需要选择对应的系统版本。http://ffmpeg.org/download.html 下载解压后ffmpeg-4.4-full_build\\ffmpeg-4.4-full_build\\bin下有几个执行文件。 可以尝试使用 ffmpeg 对视频格式进行转换，比如一个mp4文件，想转为aviffmpeg -i test.avi output.mp4","link":"/2021/03/24/2021-03-24-%E5%A4%9A%E5%AA%92%E4%BD%93%E9%9F%B3%E8%A7%86%E9%A2%91%E7%B3%BB%E5%88%97_%E4%BD%BF%E7%94%A8FFmpeg/"},{"title":"相机能力_开篇","text":"做多媒体相机开发很长一段时间了，需要在自己的笔记本上及时写好总结。比如： 1 Android相机的体系架构 2 相机服务的作用 3 相机的一些调试方法 4 ……","link":"/2021/03/24/2021-03-24-%E7%9B%B8%E6%9C%BA%E8%83%BD%E5%8A%9B/"},{"title":"应用无法获取相机tag","text":"Camera应用Tag无法获取，首先检查Tag上报情况，如果已经上报，则进一步检查重复定义情况。 Tag属性上报adb shell dumpsys media.camera-&gt;camera in for. txt检查Hal是否已经把应用无法获取的tag上报给了Framework层，如果没有，则需要底层适配。 重复定义如果通过dump的信息确认tag已经上报，可以进一步检查是否存在tag属性重复定义的情况。 底层对Tag定义进行排查，是否存在重复定义。 查看Android. request. available Character isticsKeys，看是否有相同的值。 关键代码","link":"/2021/04/08/2021-04-08-%E5%A4%9A%E5%AA%92%E4%BD%93%E7%9B%B8%E6%9C%BA%E7%B3%BB%E5%88%97_%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E7%9B%B8%E6%9C%BAtag/"},{"title":"多媒体相机系列:认识相机","text":"前言这篇文章为入门相机的同学简单介绍了相机的发展过程以及基本原理，这些基础知识其实很重要，可以帮助我们更好的理解相机拍摄出图的过程。 1 小孔成像小孔成像，我国的学者—墨翟（墨子）和他的学生，做了世界上第一个小孔成倒像的实验，解释了小孔成倒像的原因，指出了光沿直线进行的性质，早于牛顿2000多年就已经总结出相似的理论 。这是对光沿直线传播的第一次科学解释。 用一个带有小孔的板遮挡在墙体与物之间，墙体上就会形成物的倒影，我们把这样的现象叫小孔成像。前后移动中间的板，墙体上像的大小也会随之发生变化，这种现象说明了光沿直线传播的性质。 小孔成像就是相机最基础的原理。 2 暗箱作画霍克尼是当今艺术领域最具影响力的大师之一，一生创作了大量腐蚀板画。这位大师在2012年出版的《隐秘的知识》一书中告诉读者，文艺复兴时代，像达芬奇，拉斐尔等一众艺术宗师们作画时都会利用小孔成像原理，通过透视镜装置来暗箱临摹。这种暗箱作画的方式，为相机得以发展做了重要铺垫。 3 凸透镜凸透镜具有屈光性，可以汇聚光线， 照相机运用凸透镜的成像规律可以使成像更清晰。1550年意大利的卡尔达诺就将双凸透镜置于原来的针孔位置上，得到了更好的映像效果。凸透镜也是如今相机必不可少的重要组成器件。 4 感光材料暗箱作画虽然帮助画家大大提升了作画效率，但是依旧难以满足科学家和商人们对快速纪录影像的极致追求。既然光可以将物体的影像呈现在画板上，那有什么办法可以让“光照记录”可以永久保存下来呢？显然，要找到答案，就必须找到什么物质可以对光照产生某种化学反应就好了。 1825年，法国人将感光材料放进暗箱，拍摄了现存最早的照片。下面的照片名为《 窗外景色 》，话说曝光了8小时。 1888年，美国柯达公司生产了新型感光材料胶卷。胶卷用到的主要化学材料是卤化银， 卤化银感光材料的感光度比非银感光材料的高很多，加以它的感色范围宽，易于得到彩色图像，所以被作为相机感光的重要化学材料。 5 数码相机数码相机和普通相机最主要的区别就在于感光材料进化成了感光元件，感光元件将光学影像转换成电子数据，两种最广泛应用的感光元件：CCD和CMOS。感光元件也就camera sensor，负责感光并转换输出最初的元数据文件，再经过DSP，ISP等图像数据处理单元，生成对用户友好可视的图像。 结语现在，我们已经明白了，拍照过程实际上是相机对物体反射光线的记录过程，实际上物体本身的颜色并不是我们对其所感知的颜色，比如芒果是黄色的，并不是芒果本身是黄色，而恰恰因为芒果可以吸收其他光线，而反射了更多的黄色光，因此我们看到的芒果是黄色。 要深入学习多媒体知识，我们需要对更多的关于光与颜色基础知识进行学习。 参考文档: 1 百度词条_小孔成像 2 维基百科_照相机","link":"/2021/04/13/2021-04-13-%E5%A4%9A%E5%AA%92%E4%BD%93%E7%9B%B8%E6%9C%BA%E7%B3%BB%E5%88%97_%E8%AE%A4%E8%AF%86%E7%9B%B8%E6%9C%BA/"},{"title":"vulkan系列:推送常数","text":"推送常数说明推送常数是一种特殊的更新着色器常量数据的方法，它使用指令缓存的方式，而非资源的写入或者复制描述符来完成更新的操作。推送常数提供了一种高速的优化方式，可以高效地更新流水线中的常量数据。下面以一个例子来说明推送常数怎么使用 效果按键A和S可以切换顶点颜色 定义推送常数资源着色器中的推送常数资源是通过关键字push_constant来定义的，它被用在布局当中定义一个推送常数块（push constant block）。如下图定义了一个pushcConstant的推送常数块 123456789101112131415161718192021222324252627282930313233#version 450#extension GL_ARB_separate_shader_objects : enablelayout(constant_id=0) const int ColorChange = 0;layout(push_constant) uniform pushCons{ int level;} pushcConstant;layout(location = 0) out vec3 fragColor;vec2 positions[3] = vec2[]( vec2(-0.5, 0.5), vec2(0, -0.5), vec2(0.5, 0.5));vec3 red = vec3(1.0, 0.0, 0.0);vec3 green = vec3(0.0, 1.0, 0.0);vec3 blue = vec3(0.0, 0.0, 1.0);vec3 colors[3] = vec3[]( red, green, blue);void main() { if (pushcConstant.level == 1) colors = vec3[](green, blue, red); else if (pushcConstant.level == 2) colors = vec3[](blue, red, green); else colors = vec3[]( red, green, blue); gl_Position = vec4(positions[gl_VertexIndex], 0.0, 1.0); fragColor = colors[gl_VertexIndex];} 键盘交互void processInput(GLFWwindow* window) { if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS) { std::cout &lt;&lt; &quot;PRESS KEY_S: &quot; &lt;&lt; GLFW_KEY_S &lt;&lt; std::endl; // 设置推送常数的值 pushDatas[0].level--; if (pushDatas[0].level == 0) { pushDatas[0].level = 3; } RecorderCommandBuffer(); } if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS) { std::cout &lt;&lt; &quot;PRESS KEY_S: &quot; &lt;&lt; GLFW_KEY_S &lt;&lt; std::endl; // 设置推送常数的值 pushDatas[0].level++; if (pushDatas[0].level == 4) { pushDatas[0].level = 1; } RecorderCommandBuffer(); } } 12345678void Renderer::StartRender(){ while (!glfwWindowShouldClose(mWindow)) { glfwPollEvents(); processInput(mWindow); ……… }} 更新流水线布局和推送常数更新流水线布局并设置推送常数的范围。推送常数的范围在单一流水线布局中是通过结构体VkPushConstantRange定义的。更新资源数据：1 分配一个指令缓存VkCommandBuffer cmdPushConstant，给资源数据设置合适的数据值，2 执行vkCmdPushConstants（）更新资源数据，cmdPushConstant被作为第一个入参。 推送常数大小限制：推送常数的大小不可超过VkPhysicalDeviceProperties：：limits：：maxPushConstantsSize所定义的最大值。 12345678910111213141516171819202122232425262728293031323334353637383940void Renderer::RecorderCommandBuffer(){ // 判断推送常数的数量是否大于最大允许范围 int maxPushDataSize = mDeviceManager-&gt;workGpuProperties.limits.maxPushConstantsSize; if (sizeof(pushDatas) &gt; maxPushDataSize) { Utils::Assert(&quot;Vulkan ERROR:Push data size is larger than maxPushConstantsSize!&quot;); } for (size_t i = 0; i &lt; mCommandBuffer.size(); i++) { VkCommandBufferBeginInfo beginInfo = {}; beginInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO; beginInfo.flags = 0; CommandBufferMangager::BeginCmdBuffer(mCommandBuffer[i], &amp;beginInfo); VkRenderPassBeginInfo renderPassBeginInfo = {}; renderPassBeginInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO; renderPassBeginInfo.renderPass = mRenderPass; renderPassBeginInfo.framebuffer = mFrameBuffer[i]; renderPassBeginInfo.renderArea.offset = { 0 , 0 }; renderPassBeginInfo.renderArea.extent = swapChainCreateInfo.imageExtent; vkCmdPushConstants(mCommandBuffer[i], mPipelineLayout, VK_SHADER_STAGE_VERTEX_BIT, 0, sizeof(pushDatas), &amp;pushDatas); VkClearValue clearColor = { 0.0f , 0.0f , 0.0f , 1.0f }; renderPassBeginInfo.clearValueCount = 1; renderPassBeginInfo.pClearValues = &amp;clearColor; vkCmdBeginRenderPass(mCommandBuffer[i], &amp;renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE); vkCmdBindPipeline(mCommandBuffer[i], VK_PIPELINE_BIND_POINT_GRAPHICS, mGraphicsPipeline); vkCmdDraw(mCommandBuffer[i], 3, 1, 0, 0); vkCmdEndRenderPass(mCommandBuffer[i]); CommandBufferMangager::EndCmdBuffer(mCommandBuffer[i]); }}","link":"/2021/04/05/2021-04-05-vulkan%E6%8E%A8%E9%80%81%E5%B8%B8%E6%95%B0/"},{"title":"多媒体相机系列:相机使用","text":"前言系统多媒体主要包含音频，视频以及相机三大能力板块，相机能力是其中至关重要的一个，可以说所有与我们生活至关重要的那些app都离不开对相机功能的应用。 这篇文章作为相机能力的入门，对Android相机能力总结，开发者通过建立四大步骤的概念，可以很快了解到安卓相机能力如果使用。 1 获取CameraManagerCameraManager 对象用于应用测管理相机设备信息，可以获取设备的基础属性能力，用于连接相机。通过下面接口可以获取CameraManager对象，之后就可以进一步去连接使用相机设备。 1CameraManager manager=(CameraManager)getSystemService(Context.CAMERA_SERVICE); 2 打开相机关键接口： 123CameraManager: String[] getCameraIdList(); void openCamera(String cameraId, final CameraDevice.StateCallback callback, Handler handler) getCameraIdList帮助获取当前可用的相机ID列表，包括逻辑摄像头和物理摄像头。openCamera帮助打开指定ID对应的相机设备，传入的ID可以是物理ID或者逻辑ID。 说明：在相机的使用设计中，安卓提出了物理相机和逻辑相机的概念，每个物理相机对应一个实际的相机设备，而一个逻辑相机对应一个或者几个物理相机的组合，它是物理相机的软件抽象。通常，应用通过对逻辑相机下发命令去实际操作相机。 openCamera执行的结果通过CameraDevice.StateCallback回调接口通知到应用侧，打开成功会回调此接口public abstract void onOpened(@NonNull CameraDevice camera); 这样应用就可以获取到CameraDevice 对象。 3 创建会话关于会话更多的知识可以阅读文章《理解会话与请求》 关键接口： 1234CameraDevice: void createCaptureSession(List&lt;**Surface**&gt; outputs, CameraCaptureSession.StateCallback callback, Handler handler); void createCaptureSessionByOutputConfigurations( List&lt;**OutputConfiguration**&gt; outputConfigurations, CameraCaptureSession.StateCallback callback, Handler handler); 上面两个创建会话的两个接口中较多使用的是第一个，会话创建成功就说明应用已经与底层相机硬件建立起了可以进行交流的通道。 创建会话执行的结果通过CameraCaptureSession.StateCallback回调接口通知到应用侧，创建成功会回调此接口 public abstract void onConfigured(@NonNull CameraCaptureSession session); 这样应用就可以获取到CameraCaptureSession对象。 4 下发请求会话建立起来了，应用就可以通过会话通道下发请求，通常请求包括预览，拍照和录像。 关键接口： 1234CameraCaptureSession: int setRepeatingRequest(CaptureRequest request, CaptureCallback listener, Handler handler); int capture(CaptureRequest request,CaptureCallback listener, Handler handler) …… CaptureRequest应用与底层沟通的语言包是CaptureRequest，通过将自己的“述求”塞进一个个CaptureRequest对象，再调用对应的接口下发到底层。构建CaptureRequest对象要使用到其内部类CaptureRequest.Builder。使用步骤可以查看《理解会话与请求》中的请求部分。 请求创建过程中需要添加Surface作为输出目标，这里的Surface必须是创建会话时候传入的Surface对象。 结语Demo案例：gitee案例地址","link":"/2021/04/15/2021-04-15-%E5%A4%9A%E5%AA%92%E4%BD%93%E7%9B%B8%E6%9C%BA%E7%B3%BB%E5%88%97_%E7%9B%B8%E6%9C%BA%E4%BD%BF%E7%94%A8/"},{"title":"UmlMaker——移动的UML设计","text":"前言常常想要做一些软件设计，但是苦于没有PC时时在手，没有办法将自己的一些软件设计的想法及时记录下来。一直使用plantUml做软件图的绘制，就希望可以找到一款移动软件可以替代电脑，方便平时做图。我在华为和苹果的应用商城都找了下，没有找到称心的UML软件。 于是萌生了自己做一个的想法，这就是UmlMaker诞生的背景。 周六就开始自己在家做了起来，本来以为会很简单的，结果还是遇到了一些没有想到困难。 UmlMaker我准备将代码开源到码云上UmlMaker，下面是软件的设计。 如何加载网络图片？我找了几种方法，都试了下，这耗费了我不少时间，最后还是选择了使用ImageLoader插件的方式，成功的加载出了图片。 下载了jar包，再进一步导入到工程里。 下面是一个简单使用的案例： 123456789101112131415161718public void config() { // Create default imageLoader configuration parameters ImageLoaderConfiguration configuration = ImageLoaderConfiguration .createDefault(this); //Initialize ImageLoader with configuration. ImageLoader.getInstance().init(configuration);}public void loadPic(String url) { ImageLoader.getInstance().loadImage(url, new SimpleImageLoadingListener(){ @Override public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) { super.onLoadingComplete(imageUri, view, loadedImage); imageView.setImageBitmap(loadedImage); } });} 在java中调用JS代码网上对此有相关的介绍和学习案例JS in Android (Google V8) 我选择使用了J2V8的方式。 添加依赖项implementation 'com.eclipsesource.j2v8:j2v8:5.0.103@aar'，再sync一下。 1234567891011121314151617181920212223242526272829 public void testJsInJava(String str) { V8 runtime = V8.createV8Runtime(); runtime.executeVoidScript(&quot;&quot; + &quot;var s = '&quot;+ str +&quot;';\\n&quot; + &quot;s = unescape(encodeURIComponent(s));\\n&quot; + &quot;var arr = [];\\n&quot; + &quot;for (var i = 0; i &lt; s.length; i++) {\\n&quot; + &quot;arr.push(s.charCodeAt(i));\\n&quot; + &quot;}\\n&quot; // + &quot;var compressor = new Zopfli.RawDeflate(arr);\\n&quot; // + &quot;var compressed = compressor.compress();\\n&quot; ); V8Object person = runtime.getObject(&quot;arr&quot;); Log.d(TAG, &quot;result&quot;+ person.toString()); }``` ## Zopfli算法Zopfli压缩算法是google[开源](https://github.com/google/zopfli)的一个用C语言编程的压缩库，可以进行非常好但很慢的deflate或zlib压缩。压缩数据的基本功能是zopfli.h中的ZopfliCompress。使用ZopfliOptions对象来设置影响速度和压缩的参数。使用ZopfliInitOptions函数将默认值先放在ZopfliOptions中。用这个算法主要是需要将plantuml文本数据提交前要先做压缩。## Android Studio基本设置build.gradle远端仓库设置 buildscript { repositories { maven { url ‘http://maven.aliyun.com/nexus/content/groups/public/' } google() jcenter() } …… }allprojects { repositories { maven { url ‘http://maven.aliyun.com/nexus/content/groups/public/' } google() jcenter() }} 123gradle.properties设置 systemProp.socks.proxyHost=127.0.0.1systemProp.http.proxyHost=mirrors.opencas.cnsystemProp.https.proxyPort=80org.gradle.jvmargs=-DsocksProxyHost=127.0.0.1 -DsocksProxyPort=1080systemProp.https.proxyHost=mirrors.opencas.cnsystemProp.socks.proxyPort=1080systemProp.http.proxyPort=80","link":"/2021/04/24/2021-04-24-UmlMaker%E7%A7%BB%E5%8A%A8%E7%9A%84UML%E8%AE%BE%E8%AE%A1/"},{"title":"多媒体相机系列:R版本ZoomRatio","text":"前言Android R版本增加了新的zoomRatio的方式进行变焦调节，可以更精确的进行zoom调节。 fwk适配的时序图","link":"/2021/04/16/2021-04-16-%E5%A4%9A%E5%AA%92%E4%BD%93%E7%9B%B8%E6%9C%BA%E7%B3%BB%E5%88%97_R%E7%89%88%E6%9C%ACZoomRatio/"},{"title":"搭建流媒体服务器","text":"引言这两天在学习流媒体相关的知识，下面是搭建流RTMP媒体服务器的过程。 准备linux服务器一台，MP4格式影片一部。 ffmpeg、yasm、lame工具安装部署包。nginx及ngix的rtmp码流插件包 linux的公共组件包pcre-8.44及openssl-1.1.1k。 工具包准备下载yasm-1.3.0.tar.gz 下载lame-3.99.4.tar.gz 下载ffmpeg 下载nginx 下载openssl-1.1.1k 下载nginx-rtmp-module 下载pcre 下面是我准备好的安装文件，可以通过上面的链接去下载新版本，或者直接去RTMP下载我使用的相同版本。 安装解压并安装yasm汇编器12345tar -xvzf yasm-1.3.0.tar.gz //解压cd yasm-1.3.0 //进入解压目录./configure //配置安装环境make make install yasm –version 可以查看到安装的结果，说明安装成功。 解压并安装解码器12345tar -zxvf lame-3.99.4.tar.gzcd lame-3.99.4./configure --enable-shared --prefix=/usrmakemake install 配置PATH vi /etc/profile在文件末尾输入下面两句:export ENCODER_PATH=/usrexport PATH=${ENCODER_PATH}/bin:$PATH source /etc/profile lame –version 可以查看到安装的结果，说明安装成功。 解压并安装ffmpeg新建ffmpeg 安装目录/root/apps/ffmpeg4_3(这是我创建的安装目录)，下面–prefix可以对应改正自己创建的安装目录。 12345tar -xvJf ffmpeg-4.3.2.tar.xzcd ffmpeg-4.3.2 ./configure --prefix=/root/apps/ffmpeg4_3 --enable-gpl --enable-shared --enable-libmp3lamemakemake install 安装完成后到安装目录下可以看到bin;include;lib;share四个文件夹： 配置PATH vi /etc/profile在文件末尾输入下面两句:export FFMPEG_PATH=/root/apps/ffmpeg4_3export PATH=${FFMPEG_PATH}/bin:$PATH source /etc/profile ffmpeg –version 可以查看到安装的结果，说明安装成功。 但是这个时候很有可能会打印下面的错误： ffmpeg: error while loading shared libraries: libavdevice.so.58: cannot open shared object file: No such file or directory 这是因为lib目录没有加载链接到系统库中，系统ld目录列表在/etc/ld.so.config中，这里面引用了/etc/ld.so.conf.d/下面所有的.conf文件。所以我们要在这创建ffmpeg.conf文件,并且写入/root/apps/ffmpeg4_3/lib,然后执行ldconfig 再ffmpeg –version 查看版本。 如果进一步出现下面的报错，就在ffmpeg.config中添加/usr/local/lib ffmpeg: error while loading shared libraries: libmp3lame.so.0: cannot open shared object file: No such file or directory 安装部署Nginx安装nginx进入nginx的解压路径，进行编译与安装 1234./configure --prefix=/usr/local/src/nginx --add-module=../nginx-rtmp-module-master --with-http_ssl_module --with-pcre=../pcre-8.44 --with-openssl=../openssl-1.1.1kmakemake install 进行rtmp模块配置vi /usr/local/src/nginx/conf/nginx.conf 添加下面trmp模块。 123456789101112rtmp { server { listen 1935; #端口号 chunk_size 4000; application hangrtmp { #推流请求路径 live on; #开启实时 hls on; #开启hls hls_path /usr/local/src/nginx/html/hangrtmp; #推流路径 hls_fragment 5s; #每个TS文件包含5秒的视频内容 } }} 启动nginx123cd /usr/local/src/nginx/sbin./nginxlsof -ni:1935 推流测试ffmpeg -re -i abc.mp4 -flvflags no_duration_filesize -c copy -f flv rtmp://199.115.229.239:1935/hangrtmp 看到上面的结果说明安装配置成功 VLC进行网络串流播放windows下载vlc-3.0.12 媒体-打开网络串流-输入rtmp://199.115.229.239:1935/hangrtmp-播放","link":"/2021/05/02/2021-05-02-%E6%90%AD%E5%BB%BA%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"title":"一份推荐书单","text":"部门主管爽总推荐了一份个人阅读的书单，并建议大家每天阅读30分钟。以下是书单列表，码出来记录下： 《伊斯坦布尔：一座城市的记忆》 《那不勒斯四部曲》费兰特 《一个游荡者的世界》许知远 《北上》徐泽臣 《世界之用》 《尘埃落地》阿来 《一句顶一万句》刘震云 《本源》丹布朗 《渺小一生》 《万火归一》 《帝国轶闻》费尔南多 《你当像鸟飞往你的山》 《往事与随想》 《云游》托卡尔丘克 《远山淡影》石黑一雄 《荒原狼》赫尔曼 《千只鹤》川端康成 《三体》 《去吧，摩西》 《中央帝国的哲学密码》 《象牙塔的变迁》 《变革中国》 《溢出》施展 《艾希曼在耶路撒冷》 《美国式婚姻》 《人类的未来》 《红色资本》 《十年轮回》沈联涛 《暗淡蓝点：探寻人类的太空家园》卡尔萨根 《大图景》肖恩卡罗尔 《百岁人生：长寿时代的生活和工作》 《生命与新物理学》保罗戴维斯 《贪婪大脑》 《生命的跃升》 《用数据思考，避免情绪化决策》 《时间的秩序》 《集装箱改变世界》 《反脆弱：从不确定性中获益》 《舆论》 《硅谷钢铁侠》阿什利万斯 《信仰－孙正义传》 《莫迪传》 《邓小平时代》傅高义 《香农传－从0到1》 《商界裸奔》 《黑石的起点，我的顶点》 《史蒂夫乔布斯传》 《曾国藩传》 《拿破仑》 《成为》米歇尔奥巴马 《褚时健传》 《必然》凯文凯利 《时运变迁》 《商业模式全史》 《驾驭情绪的力量》 《最小阻力之路》 《财政关系与地方政府行为》 《周期：投资计划，风险，态度与市场周期》 《大而不倒》 《峭壁边缘》 《发现利润区》 《贝佐斯与亚马逊时代》 《转向：用工程师思维解决商业难题》 《HBO的战略内容》 《游戏化思维：改变未来商业的新力量》 《创业维艰》 《下一站火星：马斯克和贝佐斯的太空争夺战》 《重新定义公司》 《决战元素周期表》 《打开一颗心：外科医生的生死故事》 《跨越鸿沟》 《改变心理学的40项研究》 《心理学与生活》 《乌合之众》 《正念》 《少有人走的路》 《进化心理学》 《社会性动物》 《失控》 《哥德尔 艾舍尔 巴赫》 《人格心理学》 《发展心理学：人的毕生发展》 《为何家会伤人》","link":"/2021/05/17/2021-05-17-%E4%B8%80%E4%BB%BD%E6%8E%A8%E8%8D%90%E4%B9%A6%E5%8D%95/"},{"title":"关键网址大全","text":"专利检索网址 freepatentonline wipegloba","link":"/2021/05/19/2021-05-19-%E5%85%B3%E9%94%AE%E7%BD%91%E5%9D%80%E5%A4%A7%E5%85%A8/"},{"title":"闪光灯","text":"手机闪光灯闪光灯是拍摄时的人造光源，可以对场景补光，按下相机快门后，通常在1ms到5ms秒之间，照亮场景。闪光灯是智能手机的标配. 手机上闪光灯一般多用LED闪光灯，高端旗舰机上更多使用双色LED（Dual LED）闪光灯技术，单反相机则更多使用Xenon灯。 在手机中，闪光灯的控制主体为ae的算法，闪光灯的流程分为预闪和强闪。在环境较暗时，ae控制预闪来计算曝光3A等信息，用于控制拍摄时控制sensor曝光和闪光灯的一个打闪时间，预闪可以由flash驱动直接控制，强闪则由flash control（isp内部模块）通过GPIO的电频时间来控制闪光灯的打闪时间。 手电筒通过CameraManager可以直接打开闪光灯。 12CameraManager.setTorchMode(&quot;0&quot;, true); // 打开CameraManager.setTorchMode(&quot;0&quot;, false); // 关闭 拍照闪光灯通过在请求里控制下面两个请求参数来控制闪光灯： CaptureRequest.CONTROL_AE_MODE CaptureRequest.FLASH_MODE","link":"/2021/05/19/2021-05-19-%E5%A4%9A%E5%AA%92%E4%BD%93%E7%9B%B8%E6%9C%BA%E7%B3%BB%E5%88%97_%E9%97%AA%E5%85%89%E7%81%AF/"},{"title":"CMOS介绍","text":"摄像头主要环节：镜头组，音圈马达，红外滤光片，CIS图像传感器，模组等。其中CIS图像传感器在摄像头产业链中价值量高达52%，现在CMOS传感器市场占有率已经远超CCD。 CMOS传感器行业竞争格局 第一梯队： 索尼，引领行业技术发展全球市场占有率几乎50% 第二梯队豪威科技，三星，佳能 第三梯队格科微，思特威 豪威科技 omnivision简称OV，中文名豪威科技，是一家成立于1995 的美商半导体公司， 专业开发高度集成CMOS影像技术。 从2016年私有化开始，到2018年8月15日被韦尔股份收购，豪威科技在过去几年曾经多次被多家公司提出收购，最终被韦尔股份收入囊下。 豪威科技公司在中国布局有两个研发中心：坐落于上海张江高科技园区内的豪威科技（上海）有限公司和位于有光谷之称的武汉东湖高新技术开发区的豪威科技（武汉）有限公司。前者主要致力于CMOS摄像芯片设计、应用开发的工程技术及市场拓展；后者则侧重于软件开发、系统集成、以及图像、流媒体应用和提高的研究，同时从事大型图像集成、流媒体的分享、计算、有关云存储处理、云计算和云运用等开发。 此外，豪威科技还在上海松江出口加工区设立了技术装备均为先进的加工检测中心豪威半导体（上海）有限责任公司，以及微型镜头及感应芯片的模组研发生产中心豪威光电子科技（上海）有限公司。 图像传感器发展历程 年代 图像传感器 20世纪50年代 光学倍增管（PMT） 1965-1970 光电及双极管阵列 1970年后 CCD图像传感器 90年代末 CMOS图像传感器 图像传感器市场占比以下图表为IC Insights前瞻产业研究院统计的图像传感器销售额占比数据。 相关学习材料http://pdf.dfcfw.com/pdf/H3_AP202009251417285625_1.pdf","link":"/2021/05/30/2021-05-30-%E5%A4%9A%E5%AA%92%E4%BD%93%E7%9B%B8%E6%9C%BA%E7%B3%BB%E5%88%97_CMOS/"},{"title":"智能手机销量统计","text":"智能手机整理了近年来的手机销量情况，数据如下： 数据发布机构 年份 智能手机（亿） 全部手机（亿） 苹果（亿） 三星（亿） 华为（亿） 小米（亿） oppo（亿） vivo（亿） 中兴（亿） 诺基亚（亿） LG（亿） TCL（亿） 联想（亿） Gartner 2011 4.72 17.757 0.8926 3.14 0.4066 0.5688 4.22 Gartner 2012 7.25 17.46 1.3 3.846 0.47288 0.6734 3.33 0.58 0.37 IDC 2013 10.04 18.21 1.53 3.13 0.488 0.477 TrendForce 2014 11.67 1.913 3.264 0.7 0.6 0.7 0.9 IDC 2015 14.3 2.31 3.248 1.06 0.708 0.74 IDC 2016 14.7 2.15 3.11 1.39 0.99 0.77 IDC 2017 14.72 2.158 3.177 1.542 0.92 1.117 IDC 2018 14.026 2.088 2.923 2.06 1.226 1.131 IDC 2019 13.71 1.91 2.957 2.406 1.256 1.143 IDC 2020 12.92 2.061 2.667 1.89（中国市场1.249） 1.478 1.117 IDC 2021Q1 3.455 0.552 0.753 0.486 0.375 0.349 2020年受美国多重打压，华为终端业务受重挫，销量数据大滑，没能实现销量超越三星的成为世界第一的目标。2020年1.89亿销量中国内市场有1.249亿，如果不是国内保有了较好的销售量，数据会更惨。 穿戴设备近年来穿戴设备销售情况，数据来源于IDC","link":"/2021/05/29/2021-05-29-%E6%99%BA%E8%83%BD%E6%89%8B%E6%9C%BA%E9%94%80%E9%87%8F%E7%BB%9F%E8%AE%A1/"},{"title":"关于工作的一些思考","text":"2019年6月24号入职至今也快有两年了，一路匆匆忙忙，有所成长，也有遗憾。这里记录下一些最近关于工作生活的想法。 认准自己的方向年轻人大多数是不太满意自己的工作的。 毕业以来，我和同行业以及不同行业的朋友多次做过关于工作的交流，发现多数同学并不满意自己的工作。工作的内容没有意义，所做的业务没有前景，加班多，工资没有某某行业的高是最常见的抱怨。当然，我也常常羡慕有的同学一天八小时的工作，羡慕互联网行业普通岗位就能拿到高薪。但是，别人的生活终究是别人的，如何在这个信息和人才快速更迭的时代持续保持竞争力，如何持续对工作岗位作出贡献和吸收新的能量，如何熟悉一个领域并快速成为领域人才，如何在诸多外场干扰因素下不迷失方向，这些问题才是我个人应该关注的。 每个人都要认准自己的方向，心无旁骛。最近北大韦神“韦东奕”的采访视频很火，可以看出韦神是一个心思纯粹的人，他一定是热爱数学，并且愿意为之付出百分百努力的人。当我们认准自己的方向以后，潜心学习，努力工作，也一定能有所成就。 兴趣始于成就感就像一个小孩打篮球，因为一开始玩的比别人好就很容易激发他对篮球运动的热情，从而更加倍的投入练习，从此一切都变成了兴趣和自信自强的正向驱动。 工作的负面情绪常常来源于很多同学认为自己的工作没有意义，其根本原因我认为是大家觉得自己的业务可替代性太强，这种危机感可以使有益的，但是不加以调整就容易让自己生活陷入内耗。之前部门主管和一二年级新员工交流时问到我一个问题，什么情况下工作是最累的。我的回答是工作内容和个人兴趣不在一个方向上的时候。通过这次交流，我对内耗做了一次思考。 内耗效应这个词来源于物理学，指的是机器或其他装置本身所消耗的、没有对外做功的能量，内耗效应也就是内部资源不协调带来的负效应。内耗常常成为一个人进步的最大阻力，员工在怀疑工作领域时，很难找到在该领域前进的方向。我在做多媒体相机业务时，常想过相机的代码成熟，修改特性代码量往往不大，在这个责任田里还怎么能获取更多知识，别的责任田好像可以学得更多，在市场上更有竞争力，长久的耕耘在自己这个田里，个人的发展必然会越来越局限，那我是不是应该要换个方向。人一旦陷入这种思维困境，就常常悲观，止步不前。 静下心来想想，自己的所做的领域真的那么不堪吗？其实不见得，一山望着一山高，不过是他乡月圆的假象。我们不应该把自己局限在繁重业务里了，而是要善于发现所从事工作领域的闪光点，那些我们还不懂的知识，去总结学习，慢慢变成一个懂的更多的人。就像相机领域，我会问自己，除了完成一些需求，分析过几个问题，我是不是去挖掘过更多的相机甚至其相关领域的知识。比如：相机是属于多媒体领域，我是否熟知多媒体音视频的知识？相机的硬件和软件结构是否熟知？相机业务主要的图像处理算法都有哪些……其他的领域也是如此，我相信大多数领域其实是有很多东西可以学习。当一个人学习了解了更多，会更有成就感，而兴趣是始于成就感。 螺丝钉和U盘机械时代当螺丝钉，信息时代做U盘。 螺丝钉是不注重自身的差异性的，及易被替代，在生锈时候很自然的被抛弃。 U盘是不一样的，每个设备里存储着不一样的文件。工作要把自己当成U盘，而不是螺丝钉，要尽可能的学习知识，总结工作经验形成自己的知识体系。这样即使有一天离开了一个工作平台，我们也可以接入另一个平台的接口。 哈佛大学有两个经济学家在《教育与技术的赛跑》书里提出观点说:技术发展永远超越教育，教育在技术发展之后要做的第一件事，是重新定义什么叫有价值的能力。在工作过程中要识别有用知识，存储到自己的知识库中，提升自身有价值的能力。 多样性优于能力《差异：多元化如何仿造出更好的组织、公司、学校和社会》一书的作者斯科特·佩奇说：”能力很重要，但其边际效应会递减。“ 边际效应递减也就是说当增加的投入超过某一水平时，新增的每一个单位的投入换来的产出量会下降。这让我们必须思考如何分配知识资本，构建个人知识体系才能让自己变得更有价值？ 社会在不断发展，不同学科之间相互渗透，单领域知识往往难以解决复杂的系统问题。就像一个好的MES系统工程师，必须熟悉产品结构，生产工艺，物流管理等等，必须对上了解ERP系统，对下了解PLC控制，除此之外还要会编程。所以解决复杂问题就要求工程师必须具备多样性的知识。《爆裂》一书列出了未来社会的9大生存原则，其中就指出多样性优于能力。 2021年1月，国务院学位委员会、教育部新设置“交叉学科”门类，成为了中国第14个学科门类。说明未来多样性的交叉学科是一个趋势了。如果工作的业务总是单一重复，那说明我们要开始主动学习，打破业务的壁垒，寻求多样性。 构建知识体系一个人的经历如果不善于总结，形成自己的知识体系，凝结成智慧，那我们的经历不过是虚度光影，难以变为经验。 个人知识体系不同于知识本身的体系，它应该结合个人的特长，行业，岗位和兴趣。每个人在工作生活中构建出来的知识体系都是不一样的，即使是在相同的职业。 DIKW体系是一个关于数据、信息、知识及智慧的模型。 这个提供了一种构建个人知识体系的模型，实际上知识和智慧就是来源于原始数据，只要有心，就可以从数据中提取信息，变成自己的知识和智慧。 另外构建个人知识体系要持续保持好的思考习惯，做到独立思考和主动思考。独立思考做到不随波逐流，人云亦云，遇到事情有自己的判断力。主动思考要做到能主动提出问题，并寻找答案。","link":"/2021/06/06/2021-06-06-%E5%85%B3%E4%BA%8E%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"},{"title":"汽车销量","text":"销量统计统计的近年的汽车销售数据，国内数据来源中国汽车工业协会，国际数据来源于（？？忘掉了） 全球汽车销量情况： 年份 全球合计2020 7797.12万2019 9042.37万 2035规划 11月2日，国务院办公厅正式发布了《新能源汽车产业发展规划（2021-2035年）》 ，规划在发展愿景中指出， 纯电动乘用车新车平均电耗降至12.0千瓦时/百公里，新能源汽车新车销售量达到汽车新车销售总量的20%左右 。如果以国内3000万市场算的话，2025年新能源汽车预计可以到 600万销售量。","link":"/2021/05/30/2021-05-30-%E6%B1%BD%E8%BD%A6%E9%94%80%E9%87%8F%E6%95%B0%E6%8D%AE/"},{"title":"端午节小记","text":"哥哥嫂子，小侄女，还有妈妈端午节来上海玩了。 第一天6月12号，放假第一天，我们一早开车去了市里，第一站直奔上海科技馆。 从科技馆出来，去了就近的一家湖南菜饭店，叫温暖你的猪，饱餐了一顿。饭后接着开车去往城隍庙，在城隍庙停车场停车以后，没逛多久，发生一个小插曲，琴吖说手机找不到了。我打了个电话给饭店，想让店员帮忙去卫生间找找手机，和店员沟通后发现手机已经被人拾到并放到保安室了，随后我和哥开车去取手机，她们娘仨继续逛街。一来一回，一个来小时。 回来后，发现嫂子和小侄女穿上了漂亮的汉服装。 接着我们一路步行前往外滩，在外滩拍照留念。 这一天下来已经超级累了，她们娘仨打了个车去停车场，我和哥骑着哈罗单车赶去。 一路奔回松江后，去了追月小酒肆吃晚饭。 第二天第二天下雨，我们原本要去泰晤士小镇逛逛的计划取消了。上午去买了点衣服，下午就在家休息，晚上我们一起在家看了电影《你好，李焕英》。 今天一早7点40的高铁，我将家人们送到松江南站。","link":"/2021/06/14/2021-06-14-%E7%AB%AF%E5%8D%88%E8%8A%82%E5%B0%8F%E8%AE%B0/"},{"title":"虚幻引擎入门","text":"下载与安装直接在官网注册下载和安装。 常用按钮 上图中 123对应移动旋转和缩放。 4坐标系 56网络捕捉 7旋转捕捉 8比例捕捉 9摄像机速度 再右边是最大化视口 鼠标操作鼠标左键拖动可以前后移动和左右旋转显示位置。 鼠标右键拖动可以旋转视口相机。 鼠标左键+右键+拖动可以上下左右拖动。 鼠标+键盘操作F键：将相机聚焦到选中的对象上。 按住左键或者右键后，可用字母控制相机： WSAD：和玩游戏一样，前后左右移动相机。 EQ：上下移动相机。 ZC：推进和拉远相机（比较常用） 当使用右键+字母方式移动时候，可以通过鼠标滚轮来控制速度。 Alt操作Alt+鼠标左键+拖拽：围绕一个单独的支点翻转 Alt+鼠标右键+拖拽：向前推动相机接近或者远离支点。 Alt+鼠标中键+拖拽：根据鼠标移动方向控制相机左右上下移动。 编辑器视口通过按Alt和G、H、J、K可以循环查看视口的类型，分别对应透视、正面、侧面和顶部。 其他快捷操作Alt+P：进入Play模式 ESC：退出预览模式 F11：进入仿真模式 F8：弹出 F:快速聚焦 Alt+拖拽：原样复制 Shift+拖拽：沿着轴向移动 Ctrl+G:打组 Shift+G:解组 Ctrl+W:直接复制 H：隐藏物体 End:直接让物体附着到地面 快速对齐：两步操作，1 alt+v+按住鼠标滚轮中键 移动物体轴点中心 2 v+移动 蓝图虚幻引擎中蓝图-可视化脚本系统是一个完整的游戏脚本系统。关卡蓝图（Level Blueprint）是作用于整个关卡的全局事件图标，每个关卡都会有一个Level Blueprint ，我们可以在编辑器中编辑该蓝图但是不能通过编辑器创建新的关卡蓝图。 蓝图类型有：关卡蓝图，蓝图类，蓝图宏库和蓝图接口。","link":"/2021/06/19/2021-06-19-%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E%E5%85%A5%E9%97%A8/"},{"title":"从简看相机框架","text":"安卓相机框架代码量很大，11版本统计大概有300多个文件，85k代码，但其结构其实是很清晰的。 基于Linux cloc 工具统计： frameworks/av/services/camera/libcameraservice 文件数量134,代码量45287 frameworks/av/camera 文件数75 代码量16208 frameworks/base/core/java/android/hardware/camera2 文件数117，代码量23319 相机框架架构纵向看分为两层： Framework API层：给应用提供一套java的 API接口操作相机，通过AIDL接口跨进程调用服务层。 CameraServer 服务层：是相机框架提供相机管理控制的服务，作为系统的常驻服务进程。其再下层就是HAL层。 横向看主要包含两条线： CameraService：负责相机设备管理，包括查询，打开，关闭，状态监听。在API层提供CmaeraManger服务管理类，在native层由CameraService统一控制。 CameraDevice：负责具体设备控制，包括会话管理，buffer循环。对应用层测提供CameraDevice创建会话和下发请求等操作，对应到native层Camera3Device， 负责buffer循环控制（请求下发和接受回帧）。 下面是官方提供的框架图","link":"/2021/06/24/2021-06-24-%E5%A4%9A%E5%AA%92%E4%BD%93%E7%9B%B8%E6%9C%BA%E7%B3%BB%E5%88%97_%E4%BB%8E%E7%AE%80%E7%9C%8B%E7%9B%B8%E6%9C%BA%E6%A1%86%E6%9E%B6/"},{"title":"音频基础","text":"音频信号是一种连续变化的模拟信号，在计算机中通过模/数转换器（A/D）将音频模拟信号转换成二进制数字信号。 采样A/D转换器每秒上万次速率对声波进行采样，每一秒采样样本的数目称为采样频率。 正常人听觉的频率范围大约在20HZ~20kHZ,根据奈奎斯采样理论，为了保证声音不失真，采样频率应该在40kHZ左右。一般来说，采样频率大于48kHZ可以称为高清音频。 通常把音频采样过程叫脉冲编码调制编码（PCM编码），采样值也叫PCM值。 量化 把采样得到的声音信号幅度转换为数字值。可以分为均匀量化和非均匀量化。时间上离散叫采样，幅度上离散叫量化。（抽空画个图，加个图例） 编码编码和量化通常在一起完成的，编码就是将模拟信号转换为01数字信号。 AMP（Audio MPEG Player） 音频采集有专门的codec芯片，做AD转换，通过总线把转换后的数字信号送给CPU处理，播放时候CPU把数字信号送回给codec芯片做DA转换再播放出来。 无损压缩和有损压缩其实就是看PCM数据压缩后是否有损伤。 音频处理音频处理也就是对PCM数据进行处理，分为前处理和后处理。对音频编码前的PCM数据进行处理叫音频前处理，主要用于语音中，去除干扰，使声音更清晰，主要有处理：回音消除，噪声抑制，增益抑制。 拓展说明：音频和相机都有3A算法 语音降噪算法三个重要模块：AGC 自动增益控制、AEC 自动回声消除、ANR 自动噪声抑制 相机3A算法: AWB 自动白平衡、AE 自动曝光、AF 自动对焦 对音频编码后的PCM数据进行处理叫音频后处理，主要用于音乐中，来产生各种音效，使音乐动听，主要有均衡器，混响等。 音频芯片codec是“Coder/Decoder”的缩写，codec芯片负责数字与模拟信号的转换。它可将电脑里的数字信号转变成模拟声音信号输出,或者是将外界输入的模拟声音信号转换成数字信号。 不过codec只是音频芯片的一个分支。音频芯片大家族还包括有ADC编码芯片，Codec编解码芯片，DSP数字处理芯片，运放芯片，功放芯片，音量调节芯片，音频接口芯片，每个分类下面又有不同的品牌。 相关材料 目前国际上ADC/DAC市场份额分别被ADI、TI、MAXIM、MICROCHIP等国外企业独占，其中，ADI市占率约为58%，TI占比约为25%，MAXIM占7%，MICROCHIP占3%，难觅国内企业身影。 相关材料","link":"/2021/06/25/2021-06-25-%E5%A4%9A%E5%AA%92%E4%BD%93%E9%9F%B3%E8%A7%86%E9%A2%91%E7%B3%BB%E5%88%97_%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80/"},{"title":"白平衡","text":"白平衡白平衡（WB）是去除不真实的色差的过程，白平衡的目的就是为了让白色的物体在照片中呈现为白色。 许多人在使用数码摄像机拍摄的时候都会遇到这样的问题：在日光灯的房间里拍摄的影像会显得发绿，在室内钨丝灯光下拍摄出来的景物就会偏黄，而在日光阴影处拍摄到的照片则莫名其妙地偏蓝，其原因就在于白平衡的设置上 白平衡的英文为White Balance，其基本概念是“不管在任何光源下，都能将白色物体还原为白色”，对在特定光源下拍摄时出现的偏色现象，通过加强对应的补色来进行补偿。相机的白平衡设定可以校准色温的偏差，在拍摄时我们可以大胆地调整白平衡来达到想要的画面效果 。 色温色温可以用来描述场景的光源信息。定义：光源发光的颜色与绝对黑体在某一温度下辐射光色相同时，将黑体的温度称为该光源的色温。 白平衡算法的核心是判断图像的色温。 视频中的实验可以看到黑体颜色随温度的变化。 简易色温表 光源 色温 光源 色温 蜡烛及火光 1900K以下 朝阳及夕阳 2000K 家用钨丝灯 2900K 日出后一小时阳光 3500K 摄影用钨丝灯 3200K 早晨及午后阳光 4300K 摄影用石英灯 3200K 平常白昼 5000~6000K 220Ｖ日光灯 3500~4000K 晴天中午太阳 5400K 普通日光灯 4500~6000K 阴天 6000K以上 HMI灯 5600K 晴天时的阴影下 6000~7000K 水银灯 5800K 雪地 7000~8500K 电视萤光幕 5500~8000K 蓝天无云的天空 10000K以上 冷暖色调与色温色调与色温的关系容易搞错，实际上低色温代表暖色调，一般来说我们会把黄色、红色、橙色等颜色归为暖色调；而高色温代表冷色调，把白色、蓝色和青色等颜色归为冷色调。 相机色温设置相机设置色温是一般代表设置环境色温。 相机设置的色温正好是光源色温，这时候物体拍摄出来接近真实色彩。 设置高色温：相机设置的色温高于光源色温，相机认为此时环境是高色温，高色温偏蓝，设备会填补红色以平衡，所以拍摄出来的照片偏红。 设置低色温：相机设置的色温低于光源色温，相机认为此时环境是低色温，低色温偏红，设备会填补蓝色以平衡，所以拍摄出来的照片偏蓝。 主流白平衡处理流程 标定 统计 多种统计方式关于白色像素统计，设置一个颜色范围，只要在范围内的就可以认为是白色像素，如果块中白色像素太少，可以抛弃掉。如果白色像素太多，很可能因为区域过曝了，也要抛弃掉。 校正 传统算法灰度世界法不需要找到白点，计算过程简单 完美反射法HDR场景下效果很好，但是场景中没有白色就会失效，因为违背了算法的假设前提。 动态阈值法效果很好，对单一色块大小不敏感 白点法目前普遍应用比较多，效果好，但需要大量校准。统计加权标点法 特殊类型算法场景检测-检测人脸 、绿植 、蓝天等。 基于机器学习算法FC4 构造基于置信度加权池的全卷积网络CCCFFCC二者在图像的对数色度直方图上学习色调的变化，使用卷积方法进行色彩校正。","link":"/2021/07/10/2021-07-10-%E5%A4%9A%E5%AA%92%E4%BD%93%E7%9B%B8%E6%9C%BA%E7%B3%BB%E5%88%97_%E7%99%BD%E5%B9%B3%E8%A1%A1/"},{"title":"Buffer轮转","text":"下面是对Android 相机框架Buffer轮转相关知识的解读。 GraphicBufferGraphicBuffer是共享缓冲区，用来承载图片数据，在系统中，图像数据通过buffer形式在显示，相机应用，相机框架，Hal等多个模块间流转交互。 buffer的轮转状态一个buffer在创建后，一般会经历Free-&gt;Dequeueed-&gt;Queued-&gt;Acquired-&gt;Free几个状态循环。如下图所示 BufferQueueBufferQueue创建时候会创建BufferQueueCore对象，它是核心缓冲区的管理者，用其作为构造入参创建出生产者BufferQueueProducer对象和消费者BufferQueueConsumer对象。也就是说BufferQueue创建过程其实是建立了一个producer&gt;core&lt;consumer的绑定关系。BufferQueue机制是安卓系统的核心内容，是生产者-消费者设计模式的极好实践。生产者和消费者通常在不同的进程，共享同一块buffer内存，减少数据拷贝。 生产者BufferQueueProducerIGraphicBufferProducer接口定义了dequeue Buffer,queueBuffer,requestBuffer等纯虚函数，生产者一般分为BpGraphicBufferProducer和BnIGraphicBufferProducer两个部分，这两部分都实现了IGraphicBufferProducer接口。Bp端通过binder接口调用到Bn端接口，Bn端和BufferQueueCore属于同一个进程。 消费者BufferQueueConsumerIGraphicBufferConsumer接口定义了connect,acquireBuffer,releaseBuffer等纯虚函数，消费者分为BpGraphicBufferConsumer和BnIGraphicBufferConsumer两个部分，这两部分都实现了IGraphicBufferConsumer接口。当生产者queueBuffer到BufferQueue队列时，会通过onFrameAvailable回调来通知消费者。 相机框架轮转在java侧创建的Surface在native层有对应的一个Surface对象，相机应用将Surface作为入参创建会话，框架层会对应创建Stream数据流，一个Surface一般对应一路数据流，这个Surface对象作为生产者Bp端对象存储在Stream配置数据中。 下面是相机框架与BufferQueue的一个交互简图。","link":"/2021/07/11/2021-07-11-%E5%A4%9A%E5%AA%92%E4%BD%93%E7%9B%B8%E6%9C%BA%E7%B3%BB%E5%88%97_Buffer%E8%BD%AE%E8%BD%AC/"},{"title":"OpenCV准备环境","text":"准备python3准备python3环境安装pip，默认是安装好的 安装工具包pip install – upgrade setuptoolspip install bumpy Matplotlibpip install opencv-pythonpip install opencv-contrib-python 在python环境下执行import cv2如果没有报错，说明环境安装成功。 安装pycharm官网地址：https://www.jetbrains.com/pycharm/ 下面是使用opencv库打开一张图片示例","link":"/2021/07/28/2021-07-28-OpenCV%E5%87%86%E5%A4%87%E7%8E%AF%E5%A2%83/"},{"title":"科学上网配置","text":"环境linux系统环境：CentOS linux SS客户端：我自己下载使用的是Windows4.3.3.0版本，手机端用的Android5.2.2版本 配置科学上网命令1：wget –no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh 命令2：chmod +x shadowsocks-all.sh 命令3：./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log 我选择的是2）ShadowsocksR 安装成功了，之前选择1）一直安装不成功 yum命令报错及解决办法执行yum命令时报错 1234File &quot;/usr/bin/yum&quot;, line 30except KeyboardInterrupt, e: ^SyntaxError: invalid syntax 原因：这是因为yum采用Python作为命令解释器，这可以从/usr/bin/yum文件中第一行#!/usr/bin/python发现。python2.X版本与3.0版本之间存在语法不一致问题。CentOS 7自带的yum采用的是python2.7，当系统将python升级到3.4后，出现语法解释错误。 这是因为yum采用Python作为命令解释器，这可以从/usr/bin/yum文件中第一行#!/usr/bin/python发现。python2.X版本与3.0版本之间存在语法不一致问题。而CentOS 7自带的yum采用的是python2.7，当系统将python升级到3.4后，出现语法解释错误。 解决办法：在设置里更改解释器设置，即修改/usr/bin/yum文件，指定使用python2.7作为yum的解释器： 执行： vi /usr/bin/yum 将第一行”#!/usr/bin/python” 改为 “#!/usr/bin/python2.7”即可。 安装软件时可能出现另一种报错 12345Downloading packages: File &quot;/usr/libexec/urlgrabber-ext-down&quot;, line 28 except OSError, e: ^SyntaxError: invalid syntax 问题与前面一样，解决办法也是一样的： vi /usr/libexec/urlgrabber-ext-down 将第一行”#!/usr/bin/python” 改为 “#!/usr/bin/python2.7”即可。","link":"/2021/08/01/2021-08-01-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"PlantUML","slug":"PlantUML","link":"/tags/PlantUML/"},{"name":"常用工具","slug":"常用工具","link":"/tags/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"},{"name":"相机","slug":"相机","link":"/tags/%E7%9B%B8%E6%9C%BA/"},{"name":"编程","slug":"编程","link":"/tags/%E7%BC%96%E7%A8%8B/"},{"name":"依赖反转","slug":"依赖反转","link":"/tags/%E4%BE%9D%E8%B5%96%E5%8F%8D%E8%BD%AC/"},{"name":"曝光","slug":"曝光","link":"/tags/%E6%9B%9D%E5%85%89/"},{"name":"GN","slug":"GN","link":"/tags/GN/"},{"name":"ninja","slug":"ninja","link":"/tags/ninja/"},{"name":"Vulkan","slug":"Vulkan","link":"/tags/Vulkan/"},{"name":"环境配置","slug":"环境配置","link":"/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"Vim","slug":"Vim","link":"/tags/Vim/"},{"name":"编译","slug":"编译","link":"/tags/%E7%BC%96%E8%AF%91/"},{"name":"反编译","slug":"反编译","link":"/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"},{"name":"Android","slug":"Android","link":"/tags/Android/"},{"name":"计算机图形学","slug":"计算机图形学","link":"/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"},{"name":"音视频","slug":"音视频","link":"/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"},{"name":"FFmpeg","slug":"FFmpeg","link":"/tags/FFmpeg/"},{"name":"android相机","slug":"android相机","link":"/tags/android%E7%9B%B8%E6%9C%BA/"},{"name":"多媒体","slug":"多媒体","link":"/tags/%E5%A4%9A%E5%AA%92%E4%BD%93/"},{"name":"问题分析","slug":"问题分析","link":"/tags/%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"},{"name":"vulkan","slug":"vulkan","link":"/tags/vulkan/"},{"name":"推送常数","slug":"推送常数","link":"/tags/%E6%8E%A8%E9%80%81%E5%B8%B8%E6%95%B0/"},{"name":"plantUml","slug":"plantUml","link":"/tags/plantUml/"},{"name":"流媒体","slug":"流媒体","link":"/tags/%E6%B5%81%E5%AA%92%E4%BD%93/"},{"name":"书单","slug":"书单","link":"/tags/%E4%B9%A6%E5%8D%95/"},{"name":"关键网址","slug":"关键网址","link":"/tags/%E5%85%B3%E9%94%AE%E7%BD%91%E5%9D%80/"},{"name":"图像传感器","slug":"图像传感器","link":"/tags/%E5%9B%BE%E5%83%8F%E4%BC%A0%E6%84%9F%E5%99%A8/"},{"name":"销量","slug":"销量","link":"/tags/%E9%94%80%E9%87%8F/"},{"name":"个人思考","slug":"个人思考","link":"/tags/%E4%B8%AA%E4%BA%BA%E6%80%9D%E8%80%83/"},{"name":"汽车","slug":"汽车","link":"/tags/%E6%B1%BD%E8%BD%A6/"},{"name":"生活","slug":"生活","link":"/tags/%E7%94%9F%E6%B4%BB/"},{"name":"虚幻引擎","slug":"虚幻引擎","link":"/tags/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/"},{"name":"多媒体相机","slug":"多媒体相机","link":"/tags/%E5%A4%9A%E5%AA%92%E4%BD%93%E7%9B%B8%E6%9C%BA/"},{"name":"相机框架","slug":"相机框架","link":"/tags/%E7%9B%B8%E6%9C%BA%E6%A1%86%E6%9E%B6/"},{"name":"多媒体音频","slug":"多媒体音频","link":"/tags/%E5%A4%9A%E5%AA%92%E4%BD%93%E9%9F%B3%E9%A2%91/"},{"name":"OpenCV","slug":"OpenCV","link":"/tags/OpenCV/"},{"name":"工具","slug":"工具","link":"/tags/%E5%B7%A5%E5%85%B7/"}],"categories":[{"name":"工具","slug":"工具","link":"/categories/%E5%B7%A5%E5%85%B7/"}]}